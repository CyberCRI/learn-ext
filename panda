#!/usr/bin/env bash
_VERSION='0.1.1'
_ME=$(basename "${0}")
BANNER=$(cat <<HEREDOC
iLearn Ext Panda! (@,@)

Usage:
  ${_ME} <command> [--command-options] [<arguments>]
  ${_ME} -?
  ${_ME} --version

Options:
  -?  Display this help information.
  --version  Display version information.

Version: ${_VERSION}

Help:
  ${_ME} help [<command>]

HEREDOC
)

source ./tools/pandalib.sh

# Ensure that webpack binaries are in path too.
PATH="$PATH:./node_modules/.bin"

# ... and that the local .env file is also sourced.
source ./.env

# ... and that it isnt too verbose.
export FLAGS_VERBOSE='no'

__sigint () {
  printf '\n'
  _abort 'Ended all sessions'
}
trap __sigint SIGINT

#================================================
dev:storybook () {
  _info 'Starting Storybook Server'
  start-storybook --port 8519 --ci
}

dev:watch () {
  gen:webfonts
  webpack --config webpack.dev.js --watch
}

dev:server () {
  _info 'Starting dev-server'
  gen:webfonts
  webpack-dev-server --config webpack.dev.js --hot
}

dev:build () {
  _info 'Building [dev]'
  gen:webfonts
  webpack --config webpack.dev.js
}

dev:webext () {
  export FLAGS_VERBOSE='yes'
  web-ext run
  _success 'Closing Firefox'
}

desc 'gen:webfonts' <<BOOP
Usage:
  ${_ME} gen:webfonts

Description:
  Generates fonts.css in src/styles with the fonts found in assets/fonts.
BOOP
gen:webfonts () {
  python tools/discover-fonts.py --silent
}

release:bump () {
  # Bump the extension version!
  _info 'Bumping version'
}

release:pack () {
  _info 'Linting Extension Sources'
  web-ext lint
  _info 'Building Package'
  web-ext build --overwrite-dest
}

release:sign () {
  _info 'Requesting Signing Service'
  web-ext sign \
    --api-key $DEV_WEBEXT_API_KEY \
    --api-secret $DEV_WEBEXT_API_SECRET \
    --id $DEV_WEBEXT_EXTENSION_ID
}

release:build () {
  _info 'Compiling [Prod]'
  gen:webfonts
  webpack --config webpack.prod.js
  _success 'Done'
}

release:publish () {
  _info '<-> Syncing public releases store'
  rsync -r ./.builds/gecko-artifacts/ $DEV_EXTENSION_STORE
}

release:dev () {
  export FLAGS_VERBOSE='no'
  _info 'Building preview release'
  release:build
  release:pack
  _success 'Done!'
}

release () {
  export FLAGS_VERBOSE='no'
  _info '<*> Creating a PUBLIC release! <*>'
  release:build
  release:pack
  release:sign
  release:publish
  _success 'Published Succesfully!'
}

_get_target () {
  local _target
  for __arg in "${_COMMAND_ARGV[@]:-}"
  do
    case ${__arg} in
      --chrome) _target='chrome';;
      --firefox) _target='firefox';;
      --web) _target='web';;
    esac
  done
  if _blank "$_target"
  then
    _warn "Target unspecified. Using firefox as default."
    _info "[*] You can use --chrome, --firefox, or --web to specify a target."
  fi
  export FLAGS_TARGET="${_target}"
}

#================================================
_get_target
_main
